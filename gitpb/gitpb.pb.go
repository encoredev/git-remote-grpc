// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gitpb/gitpb.proto

package gitpb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Data struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Data) Reset()         { *m = Data{} }
func (m *Data) String() string { return proto.CompactTextString(m) }
func (*Data) ProtoMessage()    {}
func (*Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_63d25d1ceb609c7c, []int{0}
}

func (m *Data) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Data.Unmarshal(m, b)
}
func (m *Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Data.Marshal(b, m, deterministic)
}
func (m *Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Data.Merge(m, src)
}
func (m *Data) XXX_Size() int {
	return xxx_messageInfo_Data.Size(m)
}
func (m *Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Data proto.InternalMessageInfo

func (m *Data) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*Data)(nil), "gitpb.Data")
}

func init() { proto.RegisterFile("gitpb/gitpb.proto", fileDescriptor_63d25d1ceb609c7c) }

var fileDescriptor_63d25d1ceb609c7c = []byte{
	// 127 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4c, 0xcf, 0x2c, 0x29,
	0x48, 0xd2, 0x07, 0x93, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0xac, 0x60, 0x8e, 0x94, 0x74,
	0x7a, 0x7e, 0x7e, 0x7a, 0x4e, 0xaa, 0x3e, 0x58, 0x30, 0xa9, 0x34, 0x4d, 0x3f, 0x35, 0xb7, 0xa0,
	0xa4, 0x12, 0xa2, 0x46, 0x49, 0x8a, 0x8b, 0xc5, 0x25, 0xb1, 0x24, 0x51, 0x48, 0x88, 0x8b, 0x25,
	0x25, 0xb1, 0x24, 0x51, 0x82, 0x51, 0x81, 0x51, 0x83, 0x27, 0x08, 0xcc, 0x36, 0xd2, 0xe3, 0x62,
	0x76, 0xcf, 0x2c, 0x11, 0x52, 0xe7, 0x62, 0x77, 0xce, 0xcf, 0xcb, 0x4b, 0x4d, 0x2e, 0x11, 0xe2,
	0xd6, 0x83, 0x98, 0x0f, 0xd2, 0x22, 0x85, 0xcc, 0xd1, 0x60, 0x34, 0x60, 0x4c, 0x62, 0x03, 0x1b,
	0x69, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0xe4, 0x8d, 0xf8, 0x1f, 0x8b, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GitClient is the client API for Git service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GitClient interface {
	Connect(ctx context.Context, opts ...grpc.CallOption) (Git_ConnectClient, error)
}

type gitClient struct {
	cc *grpc.ClientConn
}

func NewGitClient(cc *grpc.ClientConn) GitClient {
	return &gitClient{cc}
}

func (c *gitClient) Connect(ctx context.Context, opts ...grpc.CallOption) (Git_ConnectClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Git_serviceDesc.Streams[0], "/gitpb.Git/Connect", opts...)
	if err != nil {
		return nil, err
	}
	x := &gitConnectClient{stream}
	return x, nil
}

type Git_ConnectClient interface {
	Send(*Data) error
	Recv() (*Data, error)
	grpc.ClientStream
}

type gitConnectClient struct {
	grpc.ClientStream
}

func (x *gitConnectClient) Send(m *Data) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gitConnectClient) Recv() (*Data, error) {
	m := new(Data)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GitServer is the server API for Git service.
type GitServer interface {
	Connect(Git_ConnectServer) error
}

func RegisterGitServer(s *grpc.Server, srv GitServer) {
	s.RegisterService(&_Git_serviceDesc, srv)
}

func _Git_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GitServer).Connect(&gitConnectServer{stream})
}

type Git_ConnectServer interface {
	Send(*Data) error
	Recv() (*Data, error)
	grpc.ServerStream
}

type gitConnectServer struct {
	grpc.ServerStream
}

func (x *gitConnectServer) Send(m *Data) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gitConnectServer) Recv() (*Data, error) {
	m := new(Data)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Git_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gitpb.Git",
	HandlerType: (*GitServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _Git_Connect_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "gitpb/gitpb.proto",
}
